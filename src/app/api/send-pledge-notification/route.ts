import { NextRequest, NextResponse } from 'next/server';

interface PledgeNotificationData {
  donorName: string;
  donorEmail: string;
  donorPhone: string;
  donorAddress: string;
  donorCity: string;
  donorState: string;
  donorZip: string;
  pledgeAmount: string;
  pledgeDate: string;
  paymentMethod: string;
  notes: string;
  pledgeNumber: string;
}

export async function POST(request: NextRequest) {
  try {
    const data: PledgeNotificationData = await request.json();
    
    // Email configuration
    const masjidEmail = process.env.MASJID_EMAIL || 'info@waterburyicc.org';
    const personalEmail = 'jawad.ashraf.nyc@gmail.com';
    const fromEmail = process.env.FROM_EMAIL || 'noreply@waterburyicc.org';
    
    // Create email content
    const emailSubject = `New Pledge Received - ${data.pledgeNumber}`;
    
    const emailContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>New Pledge Notification</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #7c3aed, #a855f7); color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background: #f8f9fa; }
        .pledge-info { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .donor-info { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .amount { font-size: 24px; font-weight: bold; color: #059669; }
        .label { font-weight: bold; color: #6b7280; }
        .footer { text-align: center; padding: 20px; color: #6b7280; font-size: 14px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üïå New Pledge Received</h1>
        <p>Waterbury Islamic Cultural Center</p>
    </div>
    
    <div class="content">
        <div class="pledge-info">
            <h2>üìã Pledge Information</h2>
            <p><span class="label">Pledge Number:</span> ${data.pledgeNumber}</p>
            <p><span class="label">Amount:</span> <span class="amount">$${data.pledgeAmount}</span></p>
            <p><span class="label">Preferred Payment Date:</span> ${data.pledgeDate ? new Date(data.pledgeDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : 'Not specified'}</p>
            <p><span class="label">Preferred Payment Method:</span> ${data.paymentMethod || 'Not specified'}</p>
            ${data.notes ? `<p><span class="label">Notes:</span> ${data.notes}</p>` : ''}
        </div>
        
        <div class="donor-info">
            <h2>üë§ Donor Information</h2>
            <p><span class="label">Name:</span> ${data.donorName}</p>
            <p><span class="label">Email:</span> ${data.donorEmail}</p>
            <p><span class="label">Phone:</span> ${data.donorPhone}</p>
            ${data.donorAddress ? `
                <p><span class="label">Address:</span></p>
                <p>${data.donorAddress}</p>
                <p>${data.donorCity}, ${data.donorState} ${data.donorZip}</p>
            ` : ''}
        </div>
        
        <div class="pledge-info">
            <h2>üìù Next Steps</h2>
            <p>1. Contact the donor to confirm payment arrangements</p>
            <p>2. Schedule payment collection based on their preferred method</p>
            <p>3. Update the pledge status once payment is received</p>
            <p>4. Send tax receipt upon payment completion</p>
        </div>
    </div>
    
    <div class="footer">
        <p>This notification was automatically generated by the WICC Fundraising System</p>
        <p>Received on ${new Date().toLocaleString()}</p>
    </div>
</body>
</html>
    `;

    // Send email using Brevo (if configured) or log for now
    if (process.env.BREVO_API_KEY) {
      console.log('üìß Sending email to Brevo API...');
      console.log('üìß Email data:', {
        sender: { email: fromEmail, name: 'WICC Fundraising System' },
        to: [
          { email: masjidEmail, name: 'WICC Masjid' },
          { email: personalEmail, name: 'Jawad Ashraf' }
        ],
        subject: emailSubject
      });

      const response = await fetch('https://api.brevo.com/v3/smtp/email', {
        method: 'POST',
        headers: {
          'accept': 'application/json',
          'api-key': process.env.BREVO_API_KEY,
          'content-type': 'application/json'
        },
        body: JSON.stringify({
          sender: { email: fromEmail, name: 'WICC Fundraising System' },
          to: [
            { email: masjidEmail, name: 'WICC Masjid' },
            { email: personalEmail, name: 'Jawad Ashraf' }
          ],
          subject: emailSubject,
          htmlContent: emailContent
        })
      });

      console.log('üìß Brevo API response status:', response.status);
      console.log('üìß Brevo API response headers:', Object.fromEntries(response.headers.entries()));

      if (response.ok) {
        console.log('üìß Pledge notification email sent successfully via Brevo');
        const responseData = await response.json();
        console.log('üìß Brevo response:', responseData);
      } else {
        const error = await response.text();
        console.error('Brevo API error:', error);
        console.error('Brevo API error status:', response.status);
      }
    } else {
      // Log the email content for development/testing
      console.log('üìß Pledge Notification Email (Brevo not configured):');
      console.log('To:', masjidEmail, 'and', personalEmail);
      console.log('Subject:', emailSubject);
      console.log('Content:', emailContent);
    }

    return NextResponse.json({ success: true, message: 'Pledge notification sent successfully' });
    
  } catch (error) {
    console.error('Error sending pledge notification:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to send pledge notification' },
      { status: 500 }
    );
  }
}
